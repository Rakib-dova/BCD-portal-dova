# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - refs/heads/master
      - refs/heads/snake_case
  paths:
    include:
      - /
    exclude:
      - /Documents
      - /Tests

parameters:
  - name: Environment
    type: string
    default: dev
    values:
      - dev
      - stg
      - prd

  - name: IntegrationTest
    type: string
    default: no
    values:
      - yes
      - no

variables:
  - group: ${{ parameters.Environment }}

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: BuildandPush
    jobs:
      - job:
        steps:
          - task: NodeTool@0
            displayName: "Use Node 14.x"
            inputs:
              versionSpec: 14.x

          - task: Npm@0
            displayName: "Install application dependencies"
            inputs:
              cwd: Application
              arguments: "--force"

          - task: Npm@0
            displayName: "Install test dependencies"
            inputs:
              cwd: Tests
              arguments: "--force"

          - task: gulp@0
            displayName: "Run unit tests"
            inputs:
              gulpFile: Tests/gulpfile.js
              targets: unittest
              gulpjs: "Tests/node_modules/gulp/bin/gulp.js"
              publishJUnitResults: true
            enabled: false

          - task: Npm@1
            displayName: "Run unit tests"
            inputs:
              command: "custom"
              workingDir: "Tests"
              customCommand: "run test:ci"

          - task: Docker@1
            displayName: "Build an image"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: "Redhat Container Registry"
              imageName: "$(repositoryName):$(Build.BuildId)"
              useDefaultContext: false
              buildContext: "$(System.DefaultWorkingDirectory)/Application"

          - task: Docker@2
            displayName: "Tag an image"
            inputs:
              command: tag
              arguments: "registry.redhat.io/$(repositoryName):$(Build.BuildId) $(azureContainerResistoryName).azurecr.io/$(repositoryName):$(Build.BuildId)"

          - task: Docker@1
            displayName: "Push an image"
            inputs:
              azureSubscriptionEndpoint: "$(azureSubscriptionEndpoint)"
              azureContainerRegistry: $(azureContainerResistoryName).azurecr.io
              command: push
              imageName: "$(repositoryName):$(Build.BuildId)"

  - stage: Deploy
    jobs:
      - deployment: Deploy
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  condition: eq('${{parameters.Environment}}', 'dev')
                  displayName: "Azure Web App on Container Deploy: $(portalAppName)"
                  inputs:
                    azureSubscription: "$(azureSubscriptionEndpoint)"
                    appName: "$(portalAppName)"
                    containers: "$(azureContainerResistoryName).azurecr.io/$(repositoryName):$(Build.BuildId)"
                  enabled: false

                - task: AzureWebAppContainer@1
                  displayName: 'Deploy web app container to staging slot'
                  condition: eq('${{parameters.Environment}}', 'stg')
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    appName: '$(portalAppName)'
                    deployToSlotOrASE: true
                    resourceGroupName: '$(bcd_portal_rg_name)'
                    slotName: 'staging'
                    containers: '$(azureContainerResistoryName).azurecr.io/$(repositoryName):$(Build.BuildId)'
                
                - task: AzureAppServiceManage@0
                  displayName: 'Swap slots'
                  condition: eq('${{parameters.Environment}}', 'stg')
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    Action: 'Swap Slots'
                    WebAppName: '$(portalAppName)'
                    ResourceGroupName: '$(bcd_portal_rg_name)'
                    SourceSlot: 'staging'

      - job: Confirmation
        condition: eq('${{parameters.IntegrationTest}}', 'yes')
        dependsOn: Deploy
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: Confirm before running integration tests
            inputs:
              notifyUsers: "$(BUILD.REQUESTEDFOREMAIL)"
              instructions: |
                Make sure that test accounts should be agreed with terms of service

                Procedure
                Please login to Tradeshift
                https://sandbox.tradeshift.com/?currentScreen=0
                Username:$(adminid)
                password:$(adminsecret)
                and access digital trade page
                $(digitaltradeURL)
                and if register page are displayed ,agree with terms of service (In case portal page are displayed, you have no actions)
            enabled: true

      - job: IntegrationTest
        pool:
          vmImage: "windows-latest"
        condition: eq('${{parameters.IntegrationTest}}', 'yes')
        dependsOn: Confirmation
        steps:
          - task: AzureCLI@2
            displayName: "Create front-door waf-policy rule to allow access from Azure pipeline"
            inputs:
              azureSubscription: "$(azureSubscriptionEndpoint)"
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                #Install Azure CLI extention without prompt
                az config set extension.use_dynamic_install=yes_without_prompt
                #Get Outbound IP address of Azure pipelines
                $ip=Invoke-RestMethod https://ipinfo.io/json | select -exp ip
                Write-Output -------Create front-door waf-policy rule-------
                az network front-door waf-policy rule create `
                --name temporaryAllowFromAzurePipelines `
                --priority 10 `
                --rule-type MatchRule `
                --action Allow `
                --resource-group '$(bcd_portal_rg_name)' `
                --policy-name '$(WAFname)' --defer
                Write-Output -------Add IPAdress to front-door waf-policy rule-------
                az network front-door waf-policy rule match-condition add `
                --match-variable RemoteAddr `
                --operator IPMatch `
                --values $ip `
                --name temporaryAllowFromAzurePipelines `
                --resource-group '$(bcd_portal_rg_name)' `
                --policy-name '$(WAFname)'
                Write-Output -------Wait for 3 minutes to apply change-------
                Start-Sleep -s 180

          - task: Npm@0
            displayName: "Install test dependencies"
            inputs:
              cwd: Tests
              arguments: "--force"
            enabled: true

          - task: Npm@1
            displayName: "Run integration tests"
            continueOnError: true
            inputs:
              command: "custom"
              workingDir: "Tests"
              customCommand: "run test:integrationCi -- ./az_integration.spec.js --adminid=$(adminid) --adminsecret=$(adminsecret) --userid=$(userid) --usersecret=$(usersecret)"
            enabled: true

          - task: AzureCLI@2
            displayName: "Delete front-door waf-policy rule"
            inputs:
              azureSubscription: "$(azureSubscriptionEndpoint)"
              scriptType: "ps"
              scriptLocation: "inlineScript"
              inlineScript: |
                Write-Output -------Delete front-door waf-policy rule-------
                az network front-door waf-policy rule delete `
                --name temporaryAllowFromAzurePipelines `
                --policy-name '$(WAFname)' `
                --resource-group '$(bcd_portal_rg_name)'
