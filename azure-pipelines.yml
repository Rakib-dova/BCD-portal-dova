# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - refs/heads/snake_case

  paths:
    include:
      - Application
    exclude:
      - Documents
      - Tests
      - '*.yml'

parameters:
  - name: Environment
    type: string
    default: dev
    values:
      - dev
      - dev2
      - prodstg
      - prod
      - demo
      - test
      - BuildandPush

variables:
  - group: ${{ parameters.Environment }}
  - name: tag
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  - name: devDeploy #開発環境デプロイフラグ
    value: ${{ or(eq(parameters.Environment,'dev'), eq(parameters.Environment,'dev2'))}}
  - name: Deploy #prod, proddtg, demo環境デプロイフラグ
    value: ${{ or(eq(parameters.Environment,'prodstg'), eq(parameters.Environment,'prod'),eq(parameters.Environment,'demo'),eq(parameters.Environment,'test'))}}
  - name: japanwest #西日本デプロイフラグ
    value:  ${{ or(eq(parameters.Environment,'prod'),eq(parameters.Environment,'prodstg'),eq(parameters.Environment,'test')) }}
  - name: vmPipeline #パイプライン起動停止フラグ
    value:  ${{ or(eq(parameters.Environment,'prod'),eq(parameters.Environment,'prodstg'),eq(parameters.Environment,'test')) }}

stages:
  - stage: BuildandPush
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job:
        steps:
          - task: NodeTool@0
            displayName: "Use Node 14.x"
            inputs:
              versionSpec: 14.x

          - task: Npm@0
            displayName: "Install application dependencies"
            inputs:
              cwd: Application
              arguments: "--force"

          - task: Npm@0
            displayName: "Install test dependencies"
            inputs:
              cwd: Tests
              arguments: "--force"

          - bash: sudo mkdir /home/upload
            displayName: Make directory for upload files

          - task: gulp@0
            displayName: "Run unit tests"
            inputs:
              gulpFile: Tests/gulpfile.js
              targets: unittest
              gulpjs: "Tests/node_modules/gulp/bin/gulp.js"
              publishJUnitResults: true
            enabled: false

          - bash: | 
              npm install jest-junit --save-dev
              cd ./Tests
              npm install jest-runner-eslint --save-dev
              npm run test:ci
              echo "##vso[task.setvariable variable=unittestsStatus]done"
            displayName: "Run unit tests"
            name: "UnitTests"
            
          - task: PublishCodeCoverageResults@1
            condition: eq(variables['unittestsStatus'],'done')
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/Tests/coverage/cobertura-coverage.xml
          
          - task: PublishTestResults@2
            condition: eq(variables['unittestsStatus'],'done')
            displayName: 'Publish test results'
            inputs:
              testRunTitle: '${{ parameters.Environment }}'
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/Tests/coverage/junit.xml'

          - task: Docker@1
            condition: succeeded()
            displayName: "Build an image"
            name: "Build"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: "Redhat Container Registry"
              imageName: "$(repositoryName):$(tag)"
              useDefaultContext: false
              buildContext: "$(System.DefaultWorkingDirectory)/Application"

          - task: Docker@2
            condition: succeeded()
            displayName: "Tag an image"
            name: "Tag"
            inputs:
              command: tag
              arguments: "registry.redhat.io/$(repositoryName):$(tag) $(azureContainerResistoryName).azurecr.io/$(repositoryName):$(tag)"

          - task: Docker@1
            condition: succeeded()
            displayName: "Push an image"
            name: "Push"
            inputs:
              azureSubscriptionEndpoint: "$(azureSubscriptionEndpoint)"
              azureContainerRegistry: $(azureContainerResistoryName).azurecr.io
              command: push
              imageName: "$(repositoryName):$(tag)"

  - stage: devDeploy
    dependsOn: BuildandPush
    condition: eq(variables.devDeploy ,'true')
    pool:
      vmImage: windows-latest
    jobs:
      - deployment: Deploy
        environment: ${{ parameters.Environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: "Azure Web App on Container Deploy: $(appserviceName)"
                  inputs:
                    azureSubscription: "$(azureSubscriptionEndpoint)"
                    appName: "$(appserviceName)"
                    containers: "$(azureContainerResistoryName).azurecr.io/$(repositoryName):$(tag)"


  - stage: Deploy
    pool:
      name: Default
      demands: 
      - Agent.Name -equals $(AgentName) #要Self-hostedAgent
      workspace:
        clean: all
    dependsOn: BuildandPush
    condition: eq(variables.Deploy ,'true')
    jobs:
      - job: vmstart
        displayName: Start VM for Pipeline
        pool: 
          vmImage: ubuntu-latest
        steps:
          - checkout: none
          - task: AzureCLI@2
            condition: eq(variables.vmPipeline,'True')
            displayName: Start VM for Pipline
            inputs:
              azureSubscription: '$(azureSubscriptionEndpoint)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                vmStatus=`az vm get-instance-view -n $(vmPipelineName) -g $(operationRg)  --query instanceView.statuses[1].displayStatus  -o tsv`
                if [ "$vmStatus" == "VM deallocated" ]; then
                  az vm start -g $(operationRg)  -n $(vmPipelineName)
                fi
            
      - deployment: DBSchema
        dependsOn: vmstart
        displayName: Change DBSchema
        environment: ${{ parameters.Environment }}
        strategy:
          runOnce:
            deploy: 
              steps: 
              - download: none
              
              - checkout: self

              - powershell: |
                  #DB接続先情報出力
                  $json='{
                  "${{ parameters.Environment }}": {
                    "username": "pentas",
                    "password": "$(dbadminPassword)",
                    "database": "$(databaseName)",
                    "host": "$(sqlserverFailovergroupsName)",
                    "dialect": "mssql",
                    "logging": false
                    }
                  }'
                  $json | out-file .\Application\config\config.json  -Encoding UTF8
                  #dbmigration
                  cd Application
                  npm install --save sequelize
                  $result=npx sequelize  db:migrate --env ${{ parameters.Environment }}
                  $result
                  #rollback用にmigration数を出力
                  $migrationCnt=($result|Select-String "migrated" ).Count
                  mkdir -f $(Pipeline.Workspace)/variables
                  echo $migrationCnt > $(Pipeline.Workspace)/variables/migrationCnt
                displayName: npx sequelize db:migrate
                name: dbmigrate
            
            on:
              failure:
                steps: 
                  - powershell: |
                      #undo
                      cd Application
                      $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
                      for ($i=0; $i -le $migrationCnt-1; $i++){
                        npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
                      }
                    displayName: npx sequelize  db:migrate:undo

      - deployment: japanwest
        displayName: Deploy to japanwest App Service
        dependsOn: DBSchema
        condition: eq(dependencies.DBSchema.result,'Succeeded')
        environment: ${{ parameters.Environment }}
        strategy:
          runOnce:
            preDeploy:
              steps:
              - download: current 
                displayName: Download artifacts
              - task: AzureWebAppContainer@1
                displayName: Deploy to staging slot of japaneast App Service
                inputs:
                  azureSubscription: '$(azureSubscriptionEndpoint)'
                  appName: '$(appServiceName)'
                  deployToSlotOrASE: true
                  slotName: 'staging'
                  resourceGroupName: '$(portalRg)'
                  containers: "$(azureContainerResistoryName).azurecr.io/$(repositoryName):$(tag)"
                  appSettings: -WEBSITES_ENABLE_APP_SERVICE_STORAGE "true"

              - task: AzureWebAppContainer@1
                condition: eq(variables.japanwest,'True')
                displayName: Deploy to staging slot of japanwest App Service
                inputs:
                  azureSubscription: '$(azureSubscriptionEndpoint)'
                  appName: '$(appServiceSecName)'
                  deployToSlotOrASE: true
                  slotName: 'staging'
                  resourceGroupName: '$(portalSecRg)'
                  containers: "$(azureContainerResistoryName).azurecr.io/$(repositoryName):$(tag)"
                  appSettings: -WEBSITES_ENABLE_APP_SERVICE_STORAGE "true"

              - task: AzureCLI@2
                condition: eq(variables.japanwest,'True')
                displayName: Priolity down on japanwest App Service
                inputs:
                  azureSubscription: '$(azureSubscriptionEndpoint)'
                  scriptType: 'ps'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    az config set extension.use_dynamic_install=yes_without_prompt #拡張機能を自動的にインストールする設定
                    az network front-door backend-pool backend update  -g $(portalRg)  `
                    --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                    --priority 2 --index 2 #西日本Azure Functionの優先度を下げる
            
            deploy:
              steps: 
                - download: none
                - task: AzureCLI@2
                  condition: eq(variables.japanwest,'True')
                  displayName: Swap slots on japanwest App Service
                  name: swapSlots1
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az webapp deployment slot swap --slot 'staging' --action 'swap' `
                      --name $(appServiceSecName) -g $(portalSecRg)
                      Write-Host "##vso[task.setvariable variable=swapSlots1Status]Success"

            routeTraffic:
              steps:
              - task: AzureCLI@2
                condition: eq(variables.japanwest,'True')
                displayName: Priolity down on japaneast App Service
                inputs:
                  azureSubscription: '$(azureSubscriptionEndpoint)'
                  scriptType: 'ps'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    az config set extension.use_dynamic_install=yes_without_prompt #拡張機能を自動的にインストールする設定
                    az network front-door backend-pool backend update  -g $(portalRg)  `
                    --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                    --priority 3 --index 1 #東日本App Serviceの優先度を下げる

              - task: AzureCLI@2
                condition: eq(variables.japanwest,'True')
                displayName: Priolity up on japanwest App Service
                inputs:
                  azureSubscription: '$(azureSubscriptionEndpoint)'
                  scriptType: 'ps'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    az network front-door backend-pool backend update  -g $(portalRg)  `
                    --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                    --priority 1 --index 2 #西日本App Serviceの優先度を上げる
            on:
              failure: 
                steps:
                - task: AzureCLI@2
                  condition: and(eq(variables.japanwest,'True'),eq(variables['swapSlots1Status'], 'Success'))
                  displayName: Swap slots on japanwest App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az webapp deployment slot swap --slot 'staging' --action 'swap' `
                      --name $(appServiceSecName) -g $(portalSecRg)

                - task: AzureCLI@2
                  displayName: Priolity up on japaneast App Service
                  condition: eq(variables.japanwest,'True')
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az config set extension.use_dynamic_install=yes_without_prompt #拡張機能を自動的にインストールする設定
                      az network front-door backend-pool backend update  -g $(portalRg)  `
                      --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                      --priority 1 --index 1 #東日本App Serviceの優先度を上げる
                
                - task: AzureCLI@2
                  displayName: Priolity up on japanwest App Service
                  condition: eq(variables.japanwest,'True')
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      
                      az network front-door backend-pool backend update  -g $(portalRg)  `
                      --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                      --priority 1 --index 2 #西日本Azure Functionの優先度を上げる
                      #AGENT_JOBSTATUS ='SucceededWithIssues'
                      $env:AGENT_JOBSTATUS ='SucceededWithIssues'

                - powershell: |
                    #undo
                    cd Application
                    $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
                    for ($i=0; $i -le $migrationCnt-1; $i++){
                      npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
                    }
                  displayName: npx sequelize  db:migrate:undo
                  

      - deployment: japaneast
        displayName: Deploy to japaneast App Service
        dependsOn: japanwest
        condition: eq(dependencies.japanwest.result,'Succeeded')
        environment: ${{ parameters.Environment }}
        strategy:
          runOnce:
            deploy:
              steps:              
                - download: none
                - task: AzureCLI@2
                  displayName: Swap slots on japaneast App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az webapp deployment slot swap --slot 'staging' --action 'swap' `
                      --name $(appserviceName) -g $(portalRg)
                      Write-Host "##vso[task.setvariable variable=swapSlots2Status]Success"
                      Write-Host 'swapSlots2Status'
                      Write-Host '$(swapSlots2Status)'

            routeTraffic:
              steps:
                - task: AzureCLI@2
                  condition: eq(variables.japanwest,'True')
                  displayName: Priolity up on japaneast App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az config set extension.use_dynamic_install=yes_without_prompt #拡張機能を自動的にインストールする設定
                      az network front-door backend-pool backend update  -g $(portalRg)  `
                      --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                      --priority 1 --index 1 #東日本App Serviceの優先度を上げる

            on:
              failure: 
                steps:
                - task: AzureCLI@2
                  displayName: Swap slots on japaneast App Service
                  condition: eq(variables['swapSlots2Status'], 'Success')
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az webapp deployment slot swap --slot 'staging' --action 'swap' `
                      --name $(appServiceName) -g $(portalRg)

                - task: AzureCLI@2
                  condition: eq(variables.japanwest,'True')
                  displayName: Swap slots on japanwest App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az webapp deployment slot swap --slot 'staging' --action 'swap' `
                      --name $(appServiceSecName) -g $(portalSecRg)

                - task: AzureCLI@2
                  condition: eq(variables.japanwest,'True')
                  displayName: Priolity up on japaneast App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az config set extension.use_dynamic_install=yes_without_prompt #拡張機能を自動的にインストールする設定
                      az network front-door backend-pool backend update  -g $(portalRg)  `
                      --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                      --priority 1 --index 1 #東日本App Serviceの優先度を上げる
                
                - task: AzureCLI@2
                  condition: eq(variables.japanwest,'True')
                  displayName: Priolity up on japanwest App Service
                  inputs:
                    azureSubscription: '$(azureSubscriptionEndpoint)'
                    scriptType: 'ps'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az network front-door backend-pool backend update  -g $(portalRg)  `
                      --front-door-name   $(frontdoorName)  --pool-name $(backendPoolName) `
                      --priority 1 --index 2 #西日本Azure Functionの優先度を上げる

                - powershell: |
                    #undo
                    cd Application
                    $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
                    for ($i=0; $i -le $migrationCnt-1; $i++){
                      npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
                    }
                  displayName: npx sequelize  db:migrate:undo

      - job: vmdeallocate
        displayName: Deallocate VM for Pipeline
        dependsOn: japaneast      
        pool: 
          vmImage: ubuntu-latest
        steps:
          - checkout: none
          - task: AzureCLI@2
            condition: eq(variables.vmPipeline,'True')
            displayName: Deallocate VM for Pipline
            inputs:
              azureSubscription: '$(azureSubscriptionEndpoint)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                vmStatus=`az vm get-instance-view -n $(vmPipelineName) -g $(operationRg)  --query instanceView.statuses[1].displayStatus  -o tsv`
                if [ "$vmStatus" == "VM running" ]; then
                  az vm deallocate -g  $(operationRg)  -n $(vmPipelineName)
                fi
