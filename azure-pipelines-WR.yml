# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - refs/heads/snake_case

  paths:
    include:
      - Application
      - bcd-e2e-tests
    exclude:
      - Documents
      - Tests
      - '*.yml'

parameters:
  - name: Environment
    type: string
    default: dev_WR
    values:
      - dev_WR
      - dev
      - dev2
      - docomoIDF
      - prodstg
      - prod
      - demo
      - test
      - BuildandTest

  - name: isManualOperation_prodstgOpt
    type: boolean
    default: false
    values:
      - false
      - true

variables:
  - group: ${{ parameters.Environment }}
  - name: devDeploy #開発環境デプロイフラグ
    value: ${{ or(eq(parameters.Environment,'dev'), eq(parameters.Environment,'dev2'), eq(parameters.Environment,'docomoIDF'), eq(parameters.Environment,'dev_WR'))}}
  - name: Deploy #prod, proddtg, demo環境デプロイフラグ
    value: ${{ or(eq(parameters.Environment,'prodstg'), eq(parameters.Environment,'prod'),eq(parameters.Environment,'demo'),eq(parameters.Environment,'test'))}}
  - name: japanwest #西日本デプロイフラグ
    value:  ${{ or(eq(parameters.Environment,'prod'),eq(parameters.Environment,'prodstg'),eq(parameters.Environment,'test')) }}
  - name: vmPipeline #パイプライン起動停止フラグ
    value:  ${{ or(eq(parameters.Environment,'prod'),eq(parameters.Environment,'prodstg'),eq(parameters.Environment,'test')) }}
  - name: ManualOperation #正常性確認実施フラグ
    value:  ${{ or(eq(parameters.Environment,'prod'),eq(parameters.isManualOperation_prodstgOpt,true)) }}

# stages:
#   - stage: BuildandTest
#     pool:
#       vmImage: ubuntu-latest
#     jobs:
#       - job:
#         steps:
#           - task: NodeTool@0
#             displayName: "Use Node 14.x"
#             inputs:
#               versionSpec: 14.x

#           - task: Npm@0
#             displayName: "Install application dependencies"
#             inputs:
#               cwd: Application
#               arguments: "--force"

#           - task: Npm@0
#             displayName: "Install test dependencies"
#             inputs:
#               cwd: Tests
#               arguments: "--force"

#           - bash: sudo mkdir /home/upload
#             displayName: Make directory for upload files

#           - bash: | 
#               npm install jest-junit --save-dev
#               cd ./Tests
#               npm install jest-runner-eslint --save-dev
#               npm run test:ci
#               echo "##vso[task.setvariable variable=unittestsStatus]done"
#             displayName: "Run unit tests"
#             name: "UnitTests"
            
#           - task: PublishCodeCoverageResults@1
#             condition: eq(variables['unittestsStatus'],'done')
#             displayName: 'Publish code coverage'
#             inputs:
#               codeCoverageTool: Cobertura
#               summaryFileLocation: $(System.DefaultWorkingDirectory)/Tests/coverage/cobertura-coverage.xml
          
#           - task: PublishTestResults@2
#             condition: eq(variables['unittestsStatus'],'done')
#             displayName: 'Publish test results'
#             inputs:
#               testRunTitle: '${{ parameters.Environment }}'
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/Tests/coverage/junit.xml'

#           - task: ArchiveFiles@2
#             inputs:
#               rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Application'
#               includeRootFolder: false
#               archiveType: 'zip'
#               archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#               replaceExistingArchive: true
          
#           - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#             artifact: drop
#             displayName: Publush Arifacts

#   - stage: devDeploy
#     dependsOn: BuildandTest
#     condition: eq(variables.devDeploy ,'true')
#     pool:
#       vmImage: windows-latest
#     jobs:
#       - deployment: Deploy
#         environment: ${{ parameters.Environment }}
#         strategy:
#           runOnce:
#             deploy:
#               steps:
#               - task: AzureWebApp@1
#                 displayName: 'Azure Web App Deploy'
#                 inputs:
#                   azureSubscription: $(azureSubscription)
#                   appType: webAppLinux
#                   appName: $(appserviceName)
#                   resourceGroupName: $(portalRg)
#                   runtimeStack: NODE|14-lts
#                   package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
#                   startUpCommand: npm run start

#   - stage: Deploy
#     pool:
#       name: Default
#       demands: 
#       - Agent.Name -equals $(AgentName) #要Self-hostedAgent
#       workspace:
#         clean: all
#     dependsOn: BuildandTest
#     condition: eq(variables.Deploy ,'true')
#     jobs:
#       - job: vmstart
#         displayName: Start VM for Pipeline
#         pool: 
#           vmImage: ubuntu-latest
#         steps:
#           - checkout: none
#           - task: AzureCLI@2
#             condition: eq(variables.vmPipeline,'True')
#             displayName: Start VM for Pipline
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               scriptType: 'bash'
#               scriptLocation: 'inlineScript'
#               inlineScript: |
#                 vmStatus=`az vm get-instance-view -n $(vmPipelineName) -g $(operationRg)  --query instanceView.statuses[1].displayStatus  -o tsv`
#                 if [ "$vmStatus" == "VM deallocated" ]; then
#                   az vm start -g $(operationRg)  -n $(vmPipelineName)
#                 fi
            
#       - deployment: DBSchema
#         dependsOn: vmstart
#         displayName: Change DBSchema
#         environment: ${{ parameters.Environment }}
#         strategy:
#           runOnce:
#             deploy: 
#               steps: 
#               - download: none
              
#               - checkout: self

#               - powershell: |
#                   #DB接続先情報出力
#                   $json='{
#                   "${{ parameters.Environment }}": {
#                     "username": "$(dbadminName)",
#                     "password": "$(dbadminPassword)",
#                     "database": "$(databaseName)",
#                     "host": "$(sqlserverFailovergroupsName)",
#                     "dialect": "mssql",
#                     "logging": false
#                     }
#                   }'
#                   $json | out-file .\Application\config\config.json  -Encoding UTF8
#                   #dbmigration
#                   cd Application
#                   npm install --save sequelize
#                   $result=npx sequelize  db:migrate --env ${{ parameters.Environment }}
#                   $result
#                   #rollback用にmigration数を出力
#                   $migrationCnt=($result|Select-String "migrated" ).Count
#                   mkdir -f $(Pipeline.Workspace)/variables
#                   echo $migrationCnt > $(Pipeline.Workspace)/variables/migrationCnt
#                 displayName: npx sequelize db:migrate
#                 name: dbmigrate
            
#             on:
#               failure:
#                 steps: 
#                   - powershell: |
#                       #undo
#                       cd Application
#                       $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
#                       for ($i=0; $i -le $migrationCnt-1; $i++){
#                         npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
#                       }
#                     displayName: npx sequelize  db:migrate:undo
                    
#       - job: DeployStagingSlots
#         dependsOn: DBSchema
#         steps:
#           - download: current 
#             displayName: Download artifacts

#           - task: AzureWebApp@1
#             displayName: 'Deploy to staging slot of japaneast App Service'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               appName: $(appServiceName)
#               resourceGroupName: $(portalRg)
#               runtimeStack: NODE|14-lts
#               slotName: staging
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
#               startUpCommand: npm run start
          
#           - task: AzureWebApp@1
#             displayName: 'Deploy to staging slot of japanwest App Service'
#             condition: eq(variables.japanwest,'True')
#             inputs:
#               azureSubscription: $(azureSubscription)
#               appType: webAppLinux
#               appName: $(appServiceSecName)
#               resourceGroupName: $(portalSecRg)
#               runtimeStack: NODE|14-lts
#               slotName: staging
#               package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
#               startUpCommand: npm run start
              

#       - job: preManualOperation
#         dependsOn: DeployStagingSlots
#         pool:
#           name: server
#         steps:
#           - task: ManualValidation@0
#             condition: eq(variables.ManualOperation,'True')
#             displayName: "本番スロットスワップ前手動正常性確認②"
#             inputs:
#               notifyUsers: |
#                 dendo@actec2.onmicrosoft.com
#                 nakamura@actec2.onmicrosoft.com
#               instructions: |
#                 ・東西App Service ステージングスロットの正常性確認

#       - deployment: SwapSlots1
#         dependsOn: preManualOperation
#         environment: ${{ parameters.Environment }}
#         strategy:
#           runOnce:            
#             deploy:
#               steps: 
#                 - task: AzureCLI@2
#                   condition: eq(variables.japanwest,'True')
#                   displayName: Swap slots on japanwest App Service
#                   name: swapSlots1
#                   inputs:
#                     azureSubscription: '$(azureSubscription)'
#                     scriptType: 'ps'
#                     scriptLocation: 'inlineScript'
#                     inlineScript: |
#                       az webapp deployment slot swap --slot 'staging' --action 'swap' `
#                       --name $(appServiceSecName) -g $(portalSecRg)
#                       Write-Host "##vso[task.setvariable variable=swapSlots1Status]Success"

#             on:
#               failure: 
#                 steps:
#                 - powershell: |
#                     #undo
#                     cd Application
#                     $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
#                     for ($i=0; $i -le $migrationCnt-1; $i++){
#                       npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
#                     }
#                   displayName: npx sequelize  db:migrate:undo

#       - job: postManualOperation1
#         dependsOn: SwapSlots1
#         pool:
#           name: server
#         steps:
#           - task: ManualValidation@0
#             condition: eq(variables.ManualOperation,'True')
#             displayName: "本番スロットスワップ後手動正常性確認①"
#             inputs:
#               notifyUsers: |
#                 dendo@actec2.onmicrosoft.com
#                 nakamura@actec2.onmicrosoft.com
#               instructions: |
#                 ・西App Serviceの正常性確認
#                   ・踏み台サーバー（BCD-ACS-01-sec-xxx）でデジトレアプリにアクセスし、正常性確認を実施

#       - deployment: SwapSlots2
#         dependsOn: postManualOperation1
#         environment: ${{ parameters.Environment }}
#         strategy:
#           runOnce:            
#             deploy:
#               steps: 
#                 - task: AzureCLI@2
#                   displayName: Swap slots on japaneast App Service
#                   name: swapSlots2
#                   inputs:
#                     azureSubscription: '$(azureSubscription)'
#                     scriptType: 'ps'
#                     scriptLocation: 'inlineScript'
#                     inlineScript: |
#                       az webapp deployment slot swap --slot 'staging' --action 'swap' `
#                       --name $(appserviceName) -g $(portalRg)
#                       Write-Host "##vso[task.setvariable variable=swapSlots2Status]Success"
#                       Write-Host 'swapSlots2Status'
#                       Write-Host '$(swapSlots2Status)'
#             on:
#               failure: 
#                 steps:
#                 - task: AzureCLI@2
#                   condition: and(eq(variables.japanwest,'True'),eq(variables['swapSlots1Status'], 'Success'))
#                   displayName: Swap slots on japanwest App Service
#                   inputs:
#                     azureSubscription: '$(azureSubscription)'
#                     scriptType: 'ps'
#                     scriptLocation: 'inlineScript'
#                     inlineScript: |
#                       az webapp deployment slot swap --slot 'staging' --action 'swap' `
#                       --name $(appServiceSecName) -g $(portalSecRg)

#                 - powershell: |
#                     #undo
#                     cd Application
#                     $migrationCnt=cat $(Pipeline.Workspace)/variables/migrationCnt
#                     for ($i=0; $i -le $migrationCnt-1; $i++){
#                       npx sequelize  db:migrate:undo --env ${{ parameters.Environment }}
#                     }
#                   displayName: npx sequelize  db:migrate:undo

#       - job: postManualOperation2
#         dependsOn: SwapSlots2
#         pool:
#           name: server
#         steps:
#           - task: ManualValidation@0
#             condition: eq(variables.ManualOperation,'True')
#             displayName: "本番スロットスワップ後手動正常性確認②"
#             inputs:
#               notifyUsers: |
#                 dendo@actec2.onmicrosoft.com
#                 nakamura@actec2.onmicrosoft.com
#               instructions: |
#                 ・東App Serviceの正常性確認
#                   ・踏み台サーバー（BCD-ACS-01-xxx）でデジトレアプリにアクセスし、正常性確認を実施

#       - job: vmdeallocate
#         displayName: Deallocate VM for Pipeline
#         dependsOn: postManualOperation2      
#         pool: 
#           vmImage: ubuntu-latest
#         steps:
#           - checkout: none
#           - task: AzureCLI@2
#             condition: eq(variables.vmPipeline,'True')
#             displayName: Deallocate VM for Pipline
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               scriptType: 'bash'
#               scriptLocation: 'inlineScript'
#               inlineScript: |
#                 vmStatus=`az vm get-instance-view -n $(vmPipelineName) -g $(operationRg)  --query instanceView.statuses[1].displayStatus  -o tsv`
#                 if [ "$vmStatus" == "VM running" ]; then
#                   az vm deallocate -g  $(operationRg)  -n $(vmPipelineName)
#                 fi

stages:
- stage: npm_settingStage
  jobs:
  - job: npm_settingJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
      
- stage: chromeStage
  jobs:
  - job: chrome_scenario001
    steps:
    - script:  |
        npm i
        npm run e2e --spec/scenario001.js
      workingDirectory: '$(Build.SourcesDirectory)/bcd-e2e-tests'