# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

parameters:
  - name: browser
    displayName: "実行したいブラウザを選択してください"
    type: string
    default: chrome
    values:
      - chrome
      - firefox
      - edge
      - all
  - name: BROWSER_NAME_LIST
    displayName: "※ 内部で利用するため変更しないでください！ ※"
    type: object
    default:
      - chrome
      - firefox
      - edge

trigger:
  - none
pr:
  - none

schedules:
  - cron: "0 8 * * *"
    displayName: run schedule for 17:00(8)
    branches:
      include:
        - release_step5_WR
    always: true

variables:
  DIR: $(Build.SourcesDirectory)/bcd-e2e-tests

pool:
  vmImage: windows-2019

stages:
  - stage: e2eTestStage
    jobs:
      - ${{ each BROWSER_NAME in parameters.BROWSER_NAME_LIST }}:
          - job: e2eTestJob
            displayName: ${{ BROWSER_NAME }}
            condition: or( eq( ${{ parameters.browser }}, ${{ BROWSER_NAME }} ), eq( ${{ parameters.browser }}, 'all' ))
            steps:
              # - task: Cache@2
              #   inputs:
              #     key: $(DIR)/package-lock.json
              #     path: $(DIR)/node_modules
              #   displayName: Cache npm

              # - task: Cache@2
              #   inputs:
              #     key: $(DIR)/package-lock.json
              #     path: C:/Users/VssAdministrator/AppData/Local/ms-playwright
              #   displayName: Cache browser

              - script: echo ${{ BROWSER_NAME }}
                displayName: ${{ BROWSER_NAME }}

              # - script: |
              #     npm i
              #   workingDirectory: $(DIR)
              #   displayName: install

              # - script: |
              #     npm run ${{BROWSER_NAME}}
              #   workingDirectory: $(DIR)
              #   displayName: test

              # - script: |
              #     npm run e2e-report
              #   workingDirectory: $(DIR)
              #   displayName: report
              #   condition: succeededOrFailed()

              # - task: PublishPipelineArtifact@1
              #   inputs:
              #     targetPath: $(DIR)/build/autotest-report
              #     artifactName: report
              #   displayName: artifact
              #   condition: succeededOrFailed()
