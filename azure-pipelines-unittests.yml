# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - refs/heads/master
      - refs/heads/snake_case
  paths:
    include:
      - /
    exclude:
      - /Documents
      - /Tests

parameters:
  - name: Environment
    type: string
    default: dev
    values:
      - dev
      - stg
      - prd

  - name: IntegrationTest
    type: string
    default: no
    values:
      - yes
      - no

variables:
  - group: ${{ parameters.Environment }}

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: BuildandPush
    jobs:
      - job:
        steps:
          - task: NodeTool@0
            displayName: "Use Node 14.x"
            inputs:
              versionSpec: 14.x

          - task: Npm@0
            displayName: "Install application dependencies"
            inputs:
              cwd: Application
              arguments: "--force"

          - task: Npm@0
            displayName: "Install test dependencies"
            inputs:
              cwd: Tests
              arguments: "--force"

          - bash: sudo mkdir /home/upload
            displayName: Make directory for upload files

          - bash: |
              npm install jest-junit --save-dev
              cd ./Tests
              npm run test:ci
            displayName: "Run unit tests"
            
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/Tests/coverage/cobertura-coverage.xml
          
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(System.DefaultWorkingDirectory)/Tests/coverage/junit.xml'

          - task: Docker@1
            displayName: "Build an image"
            inputs:
              containerregistrytype: "Container Registry"
              dockerRegistryEndpoint: "Redhat Container Registry"
              imageName: "$(repositoryName):$(Build.BuildId)"
              useDefaultContext: false
              buildContext: "$(System.DefaultWorkingDirectory)/Application"

          - task: Docker@2
            displayName: "Tag an image"
            inputs:
              command: tag
              arguments: "registry.redhat.io/$(repositoryName):$(Build.BuildId) $(azureContainerResistoryName).azurecr.io/$(repositoryName):$(Build.BuildId)"

          - task: Docker@1
            displayName: "Push an image"
            inputs:
              azureSubscriptionEndpoint: "$(azureSubscriptionEndpoint)"
              azureContainerRegistry: $(azureContainerResistoryName).azurecr.io
              command: push
              imageName: "$(repositoryName):$(Build.BuildId)"
